name: 'Array Template'
description: 'Apply a uniform template to each array element for consistent string formatting.'
author: 'Andrew Keller'
branding:
  icon: 'type'
  color: 'orange'
inputs:
  array:
    description: 'Array containing the elements to which the template will be applied.'
    required: true
    default: ''
  template:
    description: 'String template that defines the format to be applied to each element in the array.'
    required: true
    default: ''
  word-delimiter:
    description: 'Delimiter to be used between words. Note: This can only separate words by existing symbols or changes in letter case.'
    required: false
    default: 'none'
  case:
    description: 'String case of array element in output. Options: `upper`, `lower`, `camel`, `pascal`.'
    required: false
    default: 'none'
  validation-pattern:
    description: 'Validation pattern for array elements. Defaults to `^[a-zA-Z0-9 _./-]+$`. Warning: Update only when input is trusted.'
    required: false
    default: '^[a-zA-Z0-9 _./-]+$'
outputs:
  json-array:
    description: 'JSON array with each element formatted to the specified template.'
    value: ${{ steps.process-input.outputs.json-array }}
runs:
  using: 'composite'
  steps:
    - name: Checkout action repository
      uses: actions/checkout@v4
      with:
        repository: 'palacera/github-action-array-element-template'
        path: 'action-array-element-template'

    - id: process-input
      env:
        ARRAY: ${{ inputs.array }}
        TEMPLATE: ${{ inputs.template }}
        CASE: ${{ inputs.case }}
        WORD_DELIMITER: ${{ inputs.word-delimiter }}
        VALIDATION_PATTERN: ${{ inputs.validation-pattern }}
      shell: bash
      run: |
        set +e  # Disable automatic exit on error
        output=$(python3 action-array-element-template/array_element_template.py \
        -a "$ARRAY" \
        -t "$TEMPLATE" \
        -c "$CASE" \
        -w "$WORD_DELIMITER" \
        -p "$VALIDATION_PATTERN")
        exit_status=$?
        if [ $exit_status -ne 0 ]; then
          echo "$output"
          echo "::error ::Python script execution failed"  # Error annotation
          exit $exit_status
        else
          echo "json-array=$output" >> $GITHUB_OUTPUT
        fi
        set -e  # Re-enable automatic exit on error
